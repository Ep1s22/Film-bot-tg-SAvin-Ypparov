import logging
import asyncio
import aiohttp
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7462539798:AAFQ4WJl34YT0oNKl1c8t_nJgNgsJmOqNYg'
KINO_API_KEY = 'VV0J3CV-04DM6JJ-NB4DYGW-PC3JXWV'  # –í–∞—à API-–∫–ª—é—á

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# —Ñ—Å–º
class FilterState(StatesGroup):
    waiting_for_year = State()
    waiting_for_rating = State()

# –∫–∏–Ω–æ–ø–æ–∏—Å–∫ —Ñ—É–Ω–∫
async def search_kinopoisk(query: str, filters: dict = None):
    url = "https://api.kinopoisk.dev/v1.3/movie"
    headers = {"X-API-KEY": KINO_API_KEY}
    params = {"name": query, "limit": 10, "sortField": "rating.kp", "sortType": "-1"}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ñ–∏–ª—å–º–∞–º–∏
    
    if filters:
        params.update(filters)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"API Response: {json.dumps(data, ensure_ascii=False, indent=4)}")
                    
                    if data.get("docs"):
                        movies = []
                        for movie in data["docs"]:
                            title = movie.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            year = movie.get("year", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                            rating = movie.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
                            description = movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            poster = movie.get("poster", {}).get("url", None)
                            watchability = movie.get("watchability", {}).get("items", [])

                            streaming_buttons = []
                            for platform in watchability:
                                name = platform.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
                                url = platform.get("url", "#")
                                if url and name:
                                    streaming_buttons.append([InlineKeyboardButton(text=name, url=url)])
                            
                            text = (f"*{title}* ({year})\n"
                                    f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                                    f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                            
                            movies.append((text, poster, streaming_buttons))
                        
                        return movies
                    else:
                        logger.warning(f"No results found for query: {query}, filters: {filters}")
                        return [("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", None, [])]
                else:
                    logger.error(f"API Error: {response.status}, {await response.text()}")
                    return [("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.", None, [])]
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return [("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", None, [])]

# –æ—Å–Ω –∫–æ–º–∞–Ω–¥—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç")],
            [KeyboardButton(text="–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üìã")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –∫–ª–∞–≤–∞ –µ—â–µ (–Ω–∞–∑–∞–¥)
def get_back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]],
        resize_keyboard=True
    )
    return keyboard

# —Ñ–∏–ª—å–º—ã –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–µ
async def get_popular_movies():
    url = "https://api.kinopoisk.dev/v1.3/movie"
    headers = {"X-API-KEY": KINO_API_KEY}
    params = {"sortField": "votes.kp", "sortType": "-1", "limit": 10}  # –¢–æ–ø-10 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return [movie.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for movie in data.get("docs", [])]
            else:
                return ["–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "–ú–∞—Ç—Ä–∏—Ü–∞", "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü"]  # –ó–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫

# –∫–Ω–æ–ø–∫–∏ —Å —Ñ–∏–ª—å–º–∞–º–∏ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–µ
async def get_search_suggestions_keyboard():
    suggestions = await get_popular_movies()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=film, callback_data=f"search_{film}")] for film in suggestions
    ])
    return keyboard

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤, –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏ –∞–Ω–∏–º–µ.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –¥–ª—è –≤–∞—Å!\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_main_keyboard()
    )

# –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –°–ê–ú–û–ï –ü–ï–†–í–ù–û–ï –ß–¢–û –ù–ê–ü–ò–°–ê–õ –ù–ï –†–ê–ë–û–¢–ê–õ–û 3 –î–ù–Ø 
@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç")
async def handle_search_button(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:",
        reply_markup=await get_search_suggestions_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith('search_'))
async def process_search_suggestion(callback_query: types.CallbackQuery):
    query = callback_query.data.split('_')[1]
    movies = await search_kinopoisk(query)
    await send_movies(callback_query.message, movies)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á—Ç–æ –±—ã–ª–æ —â–∞–∫–∏–Ω—É—Ç–æ –≤ –ø–æ–∏—Å–∫
@dp.message(lambda message: not message.text.startswith("/") and not message.text.startswith("–§–∏–ª—å—Ç—Ä"))
async def process_movie_search(message: Message):
    query = message.text.strip()
    if query:
        movies = await search_kinopoisk(query)
        await send_movies(message, movies)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤—É—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å 3 –Ω–æ 3 –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å ((
@dp.message(lambda message: message.text == "–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üìã")
async def handle_filter_button(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì–æ–¥", callback_data="filter_year"),
            InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥", callback_data="filter_rating")
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=keyboard)

# –æ–±—Ä–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫–∏–Ω–æ–ø–æ–∏—Å–∫—É
@dp.callback_query(lambda c: c.data.startswith('filter_'))
async def process_filter(callback_query: types.CallbackQuery, state: FSMContext):
    filter_type = callback_query.data.split('_')[1]
    
    if filter_type == "year":
        await show_year_buttons(callback_query.message, state)
    elif filter_type == "rating":
        await show_rating_buttons(callback_query.message, state)

# –∫–Ω–æ–ø–æ—á–∫–∏ —Å –≥–æ–¥–∞–º–∏ 
async def show_year_buttons(message: Message, state: FSMContext):
    year_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="2023", callback_data="year_2023")],
        [InlineKeyboardButton(text="2020", callback_data="year_2020")],
        [InlineKeyboardButton(text="2015", callback_data="year_2015")],
        [InlineKeyboardButton(text="2010", callback_data="year_2010")],
        [InlineKeyboardButton(text="2005", callback_data="year_2005")],
        [InlineKeyboardButton(text="2000", callback_data="year_2000")],
        [InlineKeyboardButton(text="1995", callback_data="year_1995")],
        [InlineKeyboardButton(text="1990", callback_data="year_1990")],
        [InlineKeyboardButton(text="1985", callback_data="year_1985")],
        [InlineKeyboardButton(text="1980", callback_data="year_1980")],
        [InlineKeyboardButton(text="–î–æ 1980", callback_data="year_before_1980")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=year_keyboard)
    await state.set_state(FilterState.waiting_for_year)

# –∫–Ω–æ–ø–æ—á–∫–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
async def show_rating_buttons(message: Message, state: FSMContext):
    rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="7+", callback_data="rating_7")],
        [InlineKeyboardButton(text="8+", callback_data="rating_8")],
        [InlineKeyboardButton(text="9+", callback_data="rating_9")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=rating_keyboard)
    await state.set_state(FilterState.waiting_for_rating)

@dp.callback_query(lambda c: c.data.startswith('year_'))
async def apply_year_filter(callback_query: types.CallbackQuery, state: FSMContext):
    year_data = callback_query.data.split('_')[1]
    
    if year_data == "before_1980":
        filters = {"year": "1900-1980"}
    else:
        filters = {"year": year_data}
    
    await process_filters(callback_query.message, filters)
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith('rating_'))
async def apply_rating_filter(callback_query: types.CallbackQuery, state: FSMContext):
    rating = callback_query.data.split('_')[1]
    filters = {"rating.kp": f"{rating}-"}
    await process_filters(callback_query.message, filters)
    await state.clear()

# –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–∏—Å–∫ –Ω–µ —É—á–∏—Ç–∞–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ–¥–∞
@dp.message(FilterState.waiting_for_year)
async def handle_unexpected_input_year(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020).")

# –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–∏—Å–∫ –Ω–µ —É—á–∏—Ç–∞–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–π—Ç–∞
@dp.message(FilterState.waiting_for_rating)
async def handle_unexpected_input_rating(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5).")

async def process_filters(message: Message, filters: dict):
    movies = await search_kinopoisk("", filters)
    await send_movies(message, movies)

# —á—Ç–æ –±—ã –Ω–µ –≤—Å–µ —Å—Ä–∞–∑—É
async def send_movies(message: Message, movies: list, page: int = 0):
    movies_per_page = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * movies_per_page
    end = start + movies_per_page
    movies_to_send = movies[start:end]

    for text, poster, streaming_buttons in movies_to_send:
        keyboard = InlineKeyboardMarkup(inline_keyboard=streaming_buttons) if streaming_buttons else None
        
        if poster:
            await message.answer_photo(photo=poster, caption=text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    # –∫–Ω–æ–ø–æ—á–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ 
    if len(movies) > end:
        navigation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data=f"next_page_{page + 1}")]
        ])
        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=navigation_keyboard)

@dp.callback_query(lambda c: c.data.startswith('next_page_'))
async def handle_next_page(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split('_')[2])
    movies = await search_kinopoisk("")  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    await send_movies(callback_query.message, movies, page)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
