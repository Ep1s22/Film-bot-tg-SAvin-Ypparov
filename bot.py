import logging
import asyncio
import aiohttp
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Tuple, Dict, Optional

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

API_TOKEN = '7462539798:AAFQ4WJl34YT0oNKl1c8t_nJgNgsJmOqNYg'
KINO_API_KEY = 'VV0J3CV-04DM6JJ-NB4DYGW-PC3JXWV'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class FilterState(StatesGroup):
    waiting_for_year = State()
    waiting_for_rating = State()
    waiting_for_genre = State()
    waiting_for_actor = State()

async def search_kinopoisk(query: str, filters: str = None) -> List[Tuple[str, str, List[List[InlineKeyboardButton]], str, Dict]]:
    url = "https://api.kinopoisk.dev/v1.3/movie"
    headers = {"X-API-KEY": KINO_API_KEY}
    params = {"name": query.strip(), "limit": 10, "sortField": "rating.kp", "sortType": "-1"}
    if filters:
        try:
            params.update(json.loads(filters))
        except json.JSONDecodeError as e:
            logger.error(f"Invalid filter JSON: {e}")
            return [("Invalid filter format.", None, [], "", {})]

    logger.info(f"Sending request to API with query: '{query}', filters: '{filters}'")
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(limit=100)) as session:
        try:
            async with session.get(url, headers=headers, params=params) as response:
                logger.info(f"API response status: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    docs = data.get("docs", [])
                    logger.info(f"Found {len(docs)} movies for query '{query}' with filters '{filters}'")
                    if not docs:
                        return [("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.", None, [], "", {})]
                    
                    movies = []
                    for i, movie in enumerate(docs):
                        description = movie.get('description')
                        if description is None:
                            description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                        short_desc = description[:50] + '...' if len(description) > 50 else description
                        
                        text = (
                            f"*{movie.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}* ({movie.get('year', '–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')})\n"
                            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {movie.get('rating', {}).get('kp', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞')}\n"
                            f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {short_desc}"
                        )
                        poster = movie.get("poster", {}).get("url")
                        watchability_items = movie.get("watchability", {}).get("items", [])
                        streaming_buttons = [
                            [InlineKeyboardButton(text=plat.get("name"), url=plat.get("url"))]
                            for plat in watchability_items[:3]
                            if plat.get("url", "").startswith(("http://", "https://"))
                        ]
                        buttons = (
                            [[InlineKeyboardButton(text="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"full_desc_{i}")]]
                            if movie.get("description") is not None else []
                        ) + streaming_buttons + [
                            [InlineKeyboardButton(text="–ü–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã üîç", callback_data=f"similar_{i}")]
                        ]
                        movies.append((text, poster, buttons, description, movie))
                    return movies
                logger.error(f"API Error: {response.status}, {await response.text()}")
                return [("–û—à–∏–±–∫–∞ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.", None, [], "", {})]
        except Exception as e:
            logger.error(f"Search error: {e}")
            return [("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, [], "", {})]

def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç"), KeyboardButton(text="–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üìã")],
            [KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç üßπ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_back_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]], resize_keyboard=True)

async def get_popular_movies() -> List[Dict[str, str]]:
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(limit=100)) as session:
        try:
            async with session.get(
                "https://api.kinopoisk.dev/v1.3/movie",
                headers={"X-API-KEY": KINO_API_KEY},
                params={"sortField": "votes.kp", "sortType": "-1", "limit": 10}
            ) as response:
                if response.status == 200:
                    return [
                        {
                            "title": movie.get("name", f"–§–∏–ª—å–º {i}"),
                            "url": next(
                                (plat.get("url", "https://example.com") 
                                 for plat in movie.get("watchability", {}).get("items", [])[:3]
                                 if plat.get("url", "").startswith(("http://", "https://"))),
                                "https://example.com"
                            )
                        }
                        for i, movie in enumerate((await response.json()).get("docs", []), 1)
                    ]
                return [{"title": f"–§–∏–ª—å–º {i}", "url": "https://example.com"} for i in range(1, 11)]
        except Exception as e:
            logger.error(f"Popular movies error: {e}")
            return [{"title": f"–§–∏–ª—å–º {i}", "url": "https://example.com"} for i in range(1, 11)]

async def get_search_suggestions_keyboard() -> InlineKeyboardMarkup:
    suggestions = await get_popular_movies()
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=m["title"], url=m["url"])] for m in suggestions]
    )

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤:", reply_markup=get_main_keyboard())

@dp.message(lambda m: m.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç")
async def handle_search_button(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=await get_search_suggestions_keyboard())

@dp.message(lambda m: m.text == "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç üßπ")
async def handle_clear_chat(message: Message):
    chat_id = message.chat.id
    message_id = message.message_id
    try:
        for i in range(message_id, message_id - 100, -1):
            try:
                await bot.delete_message(chat_id=chat_id, message_id=i)
            except Exception:
                continue
        await message.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω!", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"Error clearing chat: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞.", reply_markup=get_main_keyboard())

@dp.message(lambda m: not m.text.startswith(("/", "–§–∏–ª—å—Ç—Ä", "–ù–∞–∑–∞–¥")))
async def process_movie_search(message: Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return
    movies = await search_kinopoisk(message.text)
    if movies and movies[0][0] != "Processing request error.":
        await state.update_data(movies=movies)
        await send_movies(message, movies)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda m: m.text == "–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üìã")
async def handle_filter_button(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ–¥", callback_data="filter_year")],
        [InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥", callback_data="filter_rating")],
        [InlineKeyboardButton(text="–ñ–∞–Ω—Ä", callback_data="filter_genre")],
        [InlineKeyboardButton(text="–ê–∫—Ç—ë—Ä", callback_data="filter_actor")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('filter_'))
async def process_filter(callback_query: types.CallbackQuery, state: FSMContext):
    filter_type = callback_query.data.split('_')[1]
    handlers = {
        "year": show_year_buttons,
        "rating": show_rating_buttons,
        "genre": show_genre_buttons,
        "actor": show_actor_buttons
    }
    await handlers[filter_type](callback_query.message, state)

@dp.callback_query(lambda c: c.data.startswith('similar_'))
async def show_similar_movies(callback_query: types.CallbackQuery, state: FSMContext):
    index = int(callback_query.data.split('_')[1])
    data = await state.get_data()
    movies = data.get("movies", [])
    if 0 <= index < len(movies):
        selected_movie = movies[index][4]  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
        genres = selected_movie.get("genres", [])
        persons = selected_movie.get("persons", [])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Selected movie data: genres={genres}, persons={persons}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä –∏ –∞–∫—Ç—ë—Ä–∞
        genre = genres[0]["name"] if genres else None
        actor = next((p["name"] for p in persons if p.get("enProfession") == "actor"), None) if persons else None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∂–∞–Ω—Ä–∞, –Ω–∏ –∞–∫—Ç—ë—Ä–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not genre and not actor:
            await callback_query.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ (–Ω–µ—Ç –∂–∞–Ω—Ä–∞ –∏–ª–∏ –∞–∫—Ç—ë—Ä–æ–≤).")
            await callback_query.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ –ø–æ –∂–∞–Ω—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        filters = {}
        if genre:
            filters["genres.name"] = genre
        elif actor:  # –ï—Å–ª–∏ –∂–∞–Ω—Ä–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—ë—Ä–∞
            filters["persons.name"] = actor
        
        similar_filters = json.dumps(filters)
        logger.info(f"Similar movies filter: {similar_filters}")
        similar_movies = await search_kinopoisk("", similar_filters)
        
        if similar_movies and similar_movies[0][0] != "Processing request error.":
            if similar_movies[0][0] != "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.":
                await state.update_data(movies=similar_movies)
                await send_movies(callback_query.message, similar_movies)
            else:
                await callback_query.message.answer(f"–ü–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∂–∞–Ω—Ä–∞ '{genre}' –∏–ª–∏ –∞–∫—Ç—ë—Ä–∞ '{actor}'.")
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤.")
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
    await callback_query.answer()

async def show_year_buttons(message: Message, state: FSMContext):
    years = [2023, 2020, 2015, 2010, 2000]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(y), callback_data=f"year_{y}")] for y in years
    ] + [[InlineKeyboardButton(text="–î–æ 2000", callback_data="year_before_2000")]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=keyboard)
    await state.set_state(FilterState.waiting_for_year)

async def show_rating_buttons(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{r}+", callback_data=f"rating_{r}")] for r in [7, 8, 9]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=keyboard)
    await state.set_state(FilterState.waiting_for_rating)

async def show_genre_buttons(message: Message, state: FSMContext):
    genres = [
        "–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è", "–±–æ–µ–≤–∏–∫", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—É–∂–∞—Å—ã",
        "—Ç—Ä–∏–ª–ª–µ—Ä", "–º–µ–ª–æ–¥—Ä–∞–º–∞", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "—Ñ—ç–Ω—Ç–µ–∑–∏",
        "–∞–Ω–∏–º–∞—Ü–∏—è", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–∫—Ä–∏–º–∏–Ω–∞–ª", "–≤–µ—Å—Ç–µ—Ä–Ω"
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=g, callback_data=f"genre_{g}")] for g in genres
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=keyboard)
    await state.set_state(FilterState.waiting_for_genre)

async def show_actor_buttons(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:", reply_markup=get_back_keyboard())
    await state.set_state(FilterState.waiting_for_actor)

@dp.callback_query(lambda c: c.data.startswith(('year_', 'rating_', 'genre_')))
async def apply_filter(callback_query: types.CallbackQuery, state: FSMContext):
    filter_type, value = callback_query.data.split('_', 1)
    filters = {
        "year": json.dumps({"year": "1900-2000" if value == "before_2000" else value}),
        "rating": json.dumps({"rating.kp": f"{value}-"}),
        "genre": json.dumps({"genres.name": value})
    }
    movies = await search_kinopoisk("", filters[filter_type])
    if movies and movies[0][0] != "Processing request error.":
        await state.update_data(movies=movies)
        await send_movies(callback_query.message, movies)
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")
    await state.clear()

@dp.message(FilterState.waiting_for_actor)
async def apply_actor_filter(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ üîô":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        await state.clear()
        return
    movies = await search_kinopoisk("", json.dumps({"persons.name": message.text.strip()}))
    if movies and movies[0][0] != "Processing request error.":
        await state.update_data(movies=movies)
        await send_movies(message, movies)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∞–∫—Ç—ë—Ä—É.")
    await state.clear()

async def send_movies(message: Message, movies: List[Tuple[str, str, List[List[InlineKeyboardButton]], str, Dict]], page: int = 0):
    if not movies or not isinstance(movies, list):
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        logger.error(f"Invalid movies data: {movies}")
        return
    
    movies_per_page = 3
    start = page * movies_per_page
    end = min(start + movies_per_page, len(movies))
    
    for i, (text, poster, buttons, _, _) in enumerate(movies[start:end], start):
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
            if poster:
                await message.answer_photo(poster, caption=text, parse_mode="Markdown", reply_markup=keyboard)
            else:
                await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error sending movie {i}: {e}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞ {i}.")
            continue
    
    if len(movies) > end:
        await message.answer(
            "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data=f"next_page_{page + 1}")]
            ])
        )

@dp.callback_query(lambda c: c.data.startswith('next_page_'))
async def handle_next_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[2])
    movies = (await state.get_data()).get("movies", [])
    if movies:
        await send_movies(callback_query.message, movies, page)

@dp.callback_query(lambda c: c.data.startswith('full_desc_'))
async def show_full_description(callback_query: types.CallbackQuery, state: FSMContext):
    index = int(callback_query.data.split('_')[2])
    movies = (await state.get_data()).get("movies", [])
    if 0 <= index < len(movies):
        await callback_query.message.answer(f"üìú –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{movies[index][3]}", parse_mode="Markdown")
    await callback_query.answer()

async def main():
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"Bot failed: {e}")

if __name__ == "__main__":
    asyncio.run(main())
