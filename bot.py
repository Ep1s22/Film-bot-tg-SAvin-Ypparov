import logging
import asyncio
import aiohttp
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7462539798:AAFQ4WJl34YT0oNKl1c8t_nJgNgsJmOqNYg'
KINO_API_KEY = 'VV0J3CV-04DM6JJ-NB4DYGW-PC3JXWV'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class FilterState(StatesGroup):
    waiting_for_year = State()
    waiting_for_rating = State()

async def search_kinopoisk(query: str, filters: dict = None):
    url = "https://api.kinopoisk.dev/v1.3/movie"
    headers = {"X-API-KEY": KINO_API_KEY}
    params = {"name": query, "limit": 10, "sortField": "rating.kp", "sortType": "-1"}
    if filters:
        params.update(filters)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("docs"):
                        movies = []
                        for movie in data["docs"]:
                            title = movie.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            year = movie.get("year", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                            rating = movie.get("rating", {}).get("kp", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
                            description = movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            short_desc = (description[:50] + "..." if description and len(description) > 50 else description) or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                            poster = movie.get("poster", {}).get("url", None)
                            watchability = movie.get("watchability", {}).get("items", [])

                            streaming_buttons = []
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—á–µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                            if description and description != "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                                streaming_buttons.append([InlineKeyboardButton(text="–ü—Ä–æ—á–µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"full_desc_{len(movies)}")])
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ watchability
                            for platform in watchability or []:
                                name = platform.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
                                url = platform.get("url")
                                if url and url.startswith(("http://", "https://")):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
                                    streaming_buttons.append([InlineKeyboardButton(text=name, url=url)])
                            
                            text = f"*{title}* ({year})\n‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {short_desc}"
                            movies.append((text, poster, streaming_buttons, description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
                        return movies
                    return [("–ùothing found.", None, [], "")]
                logger.error(f"API Error: {response.status}, {await response.text()}")
                return [("API request error.", None, [], "")]
    except Exception as e:
        logger.error(f"Unexpected error in search_kinopoisk: {e}")
        return [("Processing request error.", None, [], "")]

def get_main_keyboard():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç")], [KeyboardButton(text="–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üìã")]], resize_keyboard=True)

def get_back_keyboard():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]], resize_keyboard=True)

async def get_popular_movies():
    url = "https://api.kinopoisk.dev/v1.3/movie"
    headers = {"X-API-KEY": KINO_API_KEY}
    params = {"sortField": "votes.kp", "sortType": "-1", "limit": 10}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    movies = []
                    for movie in data.get("docs", []):
                        title = movie.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        watchability = movie.get("watchability", {}).get("items", [])
                        url = next((platform.get("url", "https://example.com") for platform in watchability if platform.get("url") and platform.get("url").startswith(("http://", "https://"))), "https://example.com")
                        movies.append({"title": title, "url": url})
                    return movies
                return [{"title": f"–§–∏–ª—å–º {i}", "url": "https://example.com"} for i in range(1, 11)]
    except Exception as e:
        logger.error(f"Error in get_popular_movies: {e}")
        return [{"title": f"–§–∏–ª—å–º {i}", "url": "https://example.com"} for i in range(1, 11)]

async def get_search_suggestions_keyboard():
    suggestions = await get_popular_movies()
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=movie["title"], url=movie["url"])] for movie in suggestions])

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç")
async def handle_search_button(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:", reply_markup=await get_search_suggestions_keyboard())

@dp.message(lambda message: not message.text.startswith("/") and not message.text.startswith("–§–∏–ª—å—Ç—Ä"))
async def process_movie_search(message: Message, state: FSMContext):
    query = message.text.strip()
    if query:
        movies = await search_kinopoisk(query)
        if movies is not None:
            await state.update_data(movies=movies)
            await send_movies(message, movies)
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞.")
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")

@dp.message(lambda message: message.text == "–§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üìã")
async def handle_filter_button(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ì–æ–¥", callback_data="filter_year"), InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥", callback_data="filter_rating")]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('filter_'))
async def process_filter(callback_query: types.CallbackQuery, state: FSMContext):
    filter_type = callback_query.data.split('_')[1]
    if filter_type == "year":
        await show_year_buttons(callback_query.message, state)
    elif filter_type == "rating":
        await show_rating_buttons(callback_query.message, state)

async def show_year_buttons(message: Message, state: FSMContext):
    year_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=str(y), callback_data=f"year_{y}")] for y in [2023, 2020, 2015, 2010, 2005, 2000, 1995, 1990, 1985, 1980]] + [[InlineKeyboardButton(text="–î–æ 1980", callback_data="year_before_1980")]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=year_keyboard)
    await state.set_state(FilterState.waiting_for_year)

async def show_rating_buttons(message: Message, state: FSMContext):
    rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="7+", callback_data="rating_7")], [InlineKeyboardButton(text="8+", callback_data="rating_8")], [InlineKeyboardButton(text="9+", callback_data="rating_9")]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=rating_keyboard)
    await state.set_state(FilterState.waiting_for_rating)

@dp.callback_query(lambda c: c.data.startswith('year_'))
async def apply_year_filter(callback_query: types.CallbackQuery, state: FSMContext):
    year_data = callback_query.data.split('_')[1]
    filters = {"year": "1900-1980" if year_data == "before_1980" else year_data}
    movies = await search_kinopoisk("", filters)
    if movies is not None:
        await state.update_data(movies=movies)
        await send_movies(callback_query.message, movies)
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith('rating_'))
async def apply_rating_filter(callback_query: types.CallbackQuery, state: FSMContext):
    rating = callback_query.data.split('_')[1]
    filters = {"rating.kp": f"{rating}-"}
    movies = await search_kinopoisk("", filters)
    if movies is not None:
        await state.update_data(movies=movies)
        await send_movies(callback_query.message, movies)
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")
    await state.clear()

@dp.message(FilterState.waiting_for_year)
async def handle_unexpected_input_year(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020).")

@dp.message(FilterState.waiting_for_rating)
async def handle_unexpected_input_rating(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5).")

async def send_movies(message: Message, movies: list, page: int = 0):
    if not movies:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç.")
        return
    
    movies_per_page = 3
    start = page * movies_per_page
    end = start + movies_per_page
    movies_to_send = movies[start:end]

    for text, poster, streaming_buttons, full_desc in movies_to_send:
        keyboard = InlineKeyboardMarkup(inline_keyboard=streaming_buttons) if streaming_buttons else None
        if poster:
            await message.answer_photo(photo=poster, caption=text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    if len(movies) > end:
        navigation_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data=f"next_page_{page + 1}")]])
        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=navigation_keyboard)

@dp.callback_query(lambda c: c.data.startswith('next_page_'))
async def handle_next_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split('_')[2])
    data = await state.get_data()
    movies = data.get("movies", [])
    if movies:
        await send_movies(callback_query.message, movies, page)
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")

@dp.callback_query(lambda c: c.data.startswith('full_desc_'))
async def show_full_description(callback_query: types.CallbackQuery, state: FSMContext):
    index = int(callback_query.data.split('_')[2])
    data = await state.get_data()
    movies = data.get("movies", [])
    if movies and 0 <= index < len(movies):
        full_desc = movies[index][3]
        await callback_query.message.answer(f"üìú –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{full_desc}", parse_mode="Markdown")
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def main():
    try:
        logger.info("Starting bot polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 
if __name__ == "__main__":
    asyncio.run(main())
